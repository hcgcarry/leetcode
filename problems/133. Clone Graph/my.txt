/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        unordered_map<int,Node*> visitedNode;
        return recur(node,visitedNode);
    }
    
    Node* recur(Node* node,unordered_map<int,Node*>& visitedNode){
        if(!node) return NULL;
        unordered_map<int,Node*>::iterator findNode =visitedNode.find(node->val);
        if( findNode != visitedNode.end()) return findNode->second;
       
        
        Node* curNode = new Node(node->val);
        visitedNode.insert(pair<int,Node*>(node->val,curNode));
     
        for(auto tmpNode:node->neighbors){
            curNode->neighbors.push_back(recur(tmpNode,visitedNode));
        }
        return curNode;
         
        
        
    }
};