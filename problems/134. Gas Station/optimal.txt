I have exactly the same idea, this is my java solution.

public int canCompleteCircuit(int[] gas, int[] cost) {
    int sumGas = 0;
    int sumCost = 0;
    int start = 0;
    int tank = 0;
    for (int i = 0; i < gas.length; i++) {
        sumGas += gas[i];
        sumCost += cost[i];
        tank += gas[i] - cost[i];
        if (tank < 0) {
            start = i + 1;
            tank = 0;
        }
    }
    if (sumGas < sumCost) {
        return -1;
    } else {
        return start;
    }
}
The reason why I think this works:
1, if sum of gas is more than sum of cost, then there must be a solution. And the question guaranteed that the solution is unique(The first one I found is the right one).
2, The tank should never be negative, so restart whenever there is a negative number.

If car starts at A and can not reach B. Any station between A and B
can not reach B.(B is the first station that A can not reach.) 因為一個index的  tank += gas[i] - cost[i]; 做完如果是負的,會把他重製成0
所以B ->A的路徑中 肯定是前面的是正的