/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
       if(!head || ! head->next) return true;
        ListNode* fast = head, *slow = head;
        while(fast->next && fast->next->next){
            fast = fast->next->next;
            slow = slow->next;
        }
        slow = slow->next;
       
        ListNode *head2 = reverse(slow);
        
       
        while(head2){
            if(head2->val != head->val){
                return false;
            }
            head2 = head2->next;
            head = head->next;
        }
        return true;
    }
    ListNode* reverse(ListNode* head){
        ListNode* prev = NULL,*tmp;
        while(head){
            tmp = head->next;
            head->next = prev;
            prev = head;        
            head = tmp;
        
        }
        return prev;
    }
   
};